# Generated by Django 4.2.7 on 2025-10-14 11:55

from django.db import migrations

def seed_routes_and_stops(apps, schema_editor):
    Route = apps.get_model("routes", "Route")
    Stop = apps.get_model("routes", "Stop")

    # In-city Routes (each with stops + fares)
    incity_routes = {
        "Kampala → Entebbe": [
            ("Kibuye", 1000),
            ("Freedom City", 1500),
            ("Bata", 2000),
            ("Zana", 2500),
            ("Lubowa", 3000),
            ("Kajjansi", 3500),
            ("Namulanda", 4000),
            ("Kisubi", 5000),
            ("Kitibulu", 6000),
            ("Entebbe", 7500),
        ],
        "Kampala → Gayaza": [
            ("Wandegeya", 500),
            ("Mulago", 800),
            ("Kubiri", 1200),
            ("Kalerwe", 1500),
            ("Kyebando", 2000),
            ("Kanyanya", 2500),
            ("Mpelerwe", 3000),
            ("Wampeewo", 3500),
            ("Kasangati", 4000),
            ("Gayaza", 4500),
        ],
        "Kampala → Kira": [
            ("Wandegeya", 500),
            ("Mulago", 800),
            ("Kamwokya", 1200),
            ("Bukoto", 1500),
            ("Ntinda", 2000),
            ("Kiwatule", 2500),
            ("Najjera", 3000),
            ("Kira", 3500),
        ],
        "Kampala → Mukono": [
            ("Lugogo", 500),
            ("Nakawa", 1000),
            ("Banda", 1500),
            ("Kireka", 2000),
            ("Namboole", 2500),
            ("Bweyogerere", 3000),
            ("Namanve", 3500),
            ("Seeta", 4000),
            ("Mukono", 4500),
        ],
        "Kampala → Bulenga": [
            ("Bakuli", 500),
            ("Mengo", 800),
            ("Lubiri", 1200),
            ("Nateete", 1800),
            ("Busega", 2300),
            ("Bulenga", 2500),
        ],
        "Kampala → Ggaba": [
            ("Nsambya", 500),
            ("Kabalagala", 1000),
            ("Kansanga", 1500),
            ("Bunga", 2000),
            ("Ggaba", 2500),
        ],
        "Kampala → Portbell": [
            ("Bugolobi", 500),
            ("Kitintale", 1000),
            ("Mutungo", 1500),
            ("Luzira", 2000),
            ("Portbell", 2500),
        ],
    }

    # Create In-city Routes and Stops
    for route_name, stops in incity_routes.items():
        route = Route.objects.create(
            name=route_name,
            route_type="incity",
            start_location=route_name.split(" → ")[0],
            end_location=route_name.split(" → ")[1],
            base_fare=stops[-1][1],  # max fare as base
            is_active=True,
        )
        for index, (stop_name, fare) in enumerate(stops):
            Stop.objects.create(route=route, name=stop_name, fare=fare, order=index + 1)




    # Outer-city routes with explicit stop fares
    outercity_routes = {
        "Kampala → Jinja": [("Kampala", 0), ("Njeru", 10000), ("Jinja", 15000)],
        "Kampala → Mbale": [("Kampala", 0), ("Iganga", 15000), ("Mbale", 30000)],
        "Kampala → Masaka": [("Kampala", 0), ("Kyotera", 10000), ("Masaka", 20000)],
        "Kampala → Mbarara": [("Kampala", 0), ("Mityana", 10000), ("Fort Portal", 20000), ("Mbarara", 30000)],
        "Kampala → Fort Portal": [("Kampala", 0), ("Mityana", 10000), ("Fort Portal", 25000)],
        "Kampala → Kasese": [("Kampala", 0), ("Kasese", 45000)],
        "Kampala → Kabale": [("Kampala", 0), ("Kabale", 40000)],
        "Kampala → Gulu": [("Kampala", 0), ("Gulu", 60000)],
    }

    for route_name, stops in outercity_routes.items():
        route = Route.objects.create(
            name=route_name,
            route_type="outercity",
            start_location=stops[0][0],
            end_location=stops[-1][0],
            base_fare=stops[-1][1],
            is_active=True,
        )
        for index, (stop_name, fare) in enumerate(stops):
            Stop.objects.create(route=route, name=stop_name, fare=fare, order=index + 1)




def unseed_routes_and_stops(apps, schema_editor):
    Route = apps.get_model("routes", "Route")
    Stop = apps.get_model("routes", "Stop")
    Stop.objects.all().delete()
    Route.objects.all().delete()



class Migration(migrations.Migration):

    dependencies = [
        ('routes', '0002_busrouteassignment_stop_delete_routestop'),
    ]

    operations = [
        migrations.RunPython(seed_routes_and_stops, unseed_routes_and_stops),
    ]
